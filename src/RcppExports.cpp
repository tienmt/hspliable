// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// gibbs_pliable_lasso_logistic2_rcpp
Rcpp::List gibbs_pliable_lasso_logistic2_rcpp(const arma::vec& y, const arma::mat& X, const arma::mat& Z, int n_iter, int burn_in, double sigma0_sq, double eps, double clamp_min, double clamp_max, bool verbose);
RcppExport SEXP _hspliable_gibbs_pliable_lasso_logistic2_rcpp(SEXP ySEXP, SEXP XSEXP, SEXP ZSEXP, SEXP n_iterSEXP, SEXP burn_inSEXP, SEXP sigma0_sqSEXP, SEXP epsSEXP, SEXP clamp_minSEXP, SEXP clamp_maxSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< double >::type sigma0_sq(sigma0_sqSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< double >::type clamp_min(clamp_minSEXP);
    Rcpp::traits::input_parameter< double >::type clamp_max(clamp_maxSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_pliable_lasso_logistic2_rcpp(y, X, Z, n_iter, burn_in, sigma0_sq, eps, clamp_min, clamp_max, verbose));
    return rcpp_result_gen;
END_RCPP
}
// gibbs_pliable_lasso_missing_cpp
Rcpp::List gibbs_pliable_lasso_missing_cpp(const arma::vec& y_in, const arma::mat& X, const arma::mat& Z, int n_iter, int burn_in, double a0, double b0, double sigma0_sq, double eps, bool verbose, Rcpp::Nullable<int> seed);
RcppExport SEXP _hspliable_gibbs_pliable_lasso_missing_cpp(SEXP y_inSEXP, SEXP XSEXP, SEXP ZSEXP, SEXP n_iterSEXP, SEXP burn_inSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP sigma0_sqSEXP, SEXP epsSEXP, SEXP verboseSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type y_in(y_inSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< int >::type burn_in(burn_inSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type sigma0_sq(sigma0_sqSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<int> >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(gibbs_pliable_lasso_missing_cpp(y_in, X, Z, n_iter, burn_in, a0, b0, sigma0_sq, eps, verbose, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hspliable_gibbs_pliable_lasso_logistic2_rcpp", (DL_FUNC) &_hspliable_gibbs_pliable_lasso_logistic2_rcpp, 10},
    {"_hspliable_gibbs_pliable_lasso_missing_cpp", (DL_FUNC) &_hspliable_gibbs_pliable_lasso_missing_cpp, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_hspliable(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
